import React, { useEffect, useState } from 'react';
import './App.css';
import AddTaskForm from './components/AddTaskForm';
import TaskList from './components/TaskList';

// --- Use your actual backend URL ---
const API_URL = 'http://localhost:8080/api/tasks';
// -----------------------------------

function App() {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // --- Fetch Tasks ---
  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(API_URL);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      // --- Backend returns TaskDTO objects (make sure ID is included!) ---
      setTasks(data);
      // -------------------------------------------------------------------
    } catch (e) {
      console.error("Failed to fetch tasks:", e);
      setError("Failed to load tasks. Is the backend running and CORS configured?");
    } finally {
      setLoading(false);
    }
  };

  // --- Add Task ---
  // Takes title, description, priority from the form
  const addTask = async (title, description, priority) => {
    if (!title || title.trim() === '') {
       setError("Task title cannot be empty.");
       return;
    }

    const newTaskDTO = {
      // --- Matches your TaskDTO structure ---
      title: title.trim(),
      description: description.trim(),
      completed: false, // New tasks are not completed by default
      priority: priority || 'MEDIUM', // Default priority if none selected
      // ID is generated by the backend, not sent from frontend on creation
      // --------------------------------------
    };

    setError(null); // Clear previous errors
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newTaskDTO),
      });

      if (!response.ok) {
         const errorData = await response.text(); // Try to get error details
         console.error("POST Error Response:", errorData);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Backend returns the created TaskDTO (WITH ID - requires backend fix)
      const createdTask = await response.json();
      setTasks([...tasks, createdTask]); // Add the new task to the state

    } catch (e) {
      console.error("Failed to add task:", e);
      setError(`Failed to add task: ${e.message}`);
    }
  };

  // --- Toggle Task Completion ---
  const toggleTask = async (id) => {
    const taskToToggle = tasks.find((task) => task.id === id);
    if (!taskToToggle) return;

    // --- Your PUT endpoint expects the *entire* updated TaskDTO ---
    const updatedTaskDTO = {
      ...taskToToggle, // Spread existing task data (title, desc, priority, ID)
      completed: !taskToToggle.completed, // Toggle the completed status
    };
    // Remove id from payload if your backend automatically gets it from path variable
    // delete updatedTaskDTO.id; // Uncomment if backend doesn't expect ID in PUT body

    setError(null);
    try {
      const response = await fetch(`${API_URL}/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedTaskDTO), // Send the full DTO
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error("PUT Error Response:", errorData);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Backend returns the updated TaskDTO
      const updatedTask = await response.json();

      // Update the task in the state
      setTasks(
        tasks.map((task) =>
          task.id === id ? updatedTask : task // Replace with the DTO from backend response
        )
      );

    } catch (e) {
      console.error("Failed to toggle task:", e);
      setError(`Failed to update task status: ${e.message}`);
    }
  };

  // --- Delete Task ---
  const deleteTask = async (id) => {
     setError(null);
    try {
      const response = await fetch(`${API_URL}/${id}`, {
        method: 'DELETE',
      });

      // DELETE returns 204 No Content on success
      if (response.status === 204) {
         // Filter the task out of the state
         setTasks(tasks.filter((task) => task.id !== id));
      } else if (!response.ok) {
         const errorData = await response.text();
         console.error("DELETE Error Response:", errorData);
         throw new Error(`HTTP error! status: ${response.status}`);
      } else {
          // Handle unexpected success statuses if needed
          setTasks(tasks.filter((task) => task.id !== id));
      }


    } catch (e) {
      console.error("Failed to delete task:", e);
      setError(`Failed to delete task: ${e.message}`);
    }
  };

  // --- Render UI ---
  return (
    <div className="App">
      <h1>Task Tracker</h1>

      {error && <p className="error">{error}</p>}

      <AddTaskForm onAddTask={addTask} />

      {loading ? (
        <p>Loading tasks...</p>
      ) : (
        // Pass tasks and handlers to TaskList
        // Ensure TaskList and TaskItem use task.id, task.title, etc.
        <TaskList tasks={tasks} onToggle={toggleTask} onDelete={deleteTask} />
      )}
    </div>
  );
}

export default App;